#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, std430) buffer a {
	float data[12272];
} inArray;

layout(binding = 1, std430) buffer b {
	float data[3068];
} outArray;

layout(binding = 2, std430) buffer c {
	float data[6];
} posArray;

bool checkRayCast(vec3 v0, vec3 v1, vec3 v2, vec3 pos, vec3 norm) {
	vec3 u, v, n;
	vec3 w0, w;
	float r, a, b;

	u = v1 - v0;
	v = v2 - v0;
	n = cross(u, v);
	
	if(n.x == 0 && n.y == 0 && n.z == 0) {
		return false;
	}

	w0 = pos - v0;
	a = -dot(n, w0);
	b = dot(n, norm);

	if(abs(b) < 0.0001) {
		return false;
	}

	r = a / b;

	if (r < 0.0) {
		return false;
	}

	vec3 i = pos + r * norm;

	float uu, uv, vv, wu, wv, D;
	uu = dot(u,u);
    uv = dot(u,v);
    vv = dot(v,v);
    w = i - v0;
    wu = dot(w,u);
    wv = dot(w,v);

	D = uv * uv - uu * vv;

	float s, t;
    s = (uv * wv - vv * wu) / D;
    if (s < 0.0 || s > 1.0) {
        return false;
	}

    t = (uv * wu - uu * wv) / D;
    if (t < 0.0 || (s + t) > 1.0) {
        return false;
	}

	return true;
}

void main() {
	int rinf = int(inArray.data[gl_GlobalInvocationID.x*4+3]);

	vec3 cbps = vec3(inArray.data[gl_GlobalInvocationID.x*4+0], inArray.data[gl_GlobalInvocationID.x*4+1], inArray.data[gl_GlobalInvocationID.x*4+2]);
	vec3 pos = vec3(posArray.data[0], posArray.data[1], posArray.data[2]);
	vec3 norm = vec3(posArray.data[3], posArray.data[4], posArray.data[5]);

	int rit = 0;

	rit = rinf & 1;

	if(rit != 0) {
		//Front Face
		if(checkRayCast(cbps + vec3(0.5, -0.5, -0.5),
						cbps + vec3(-0.5, 0.5, -0.5),
						cbps + vec3(-0.5, -0.5, -0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}

		if(checkRayCast(cbps + vec3(0.5, 0.5, -0.5),
						cbps + vec3(-0.5, 0.5, -0.5),
						cbps + vec3(0.5, -0.5, -0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}
	}

	rit = rinf & 2;

	if(rit != 0) {
		//Back Face
		if(checkRayCast(cbps + vec3(-0.5, -0.5, 0.5),
						cbps + vec3(-0.5, 0.5, 0.5),
						cbps + vec3(0.5, -0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}

		if(checkRayCast(cbps + vec3(0.5, -0.5, 0.5),
						cbps + vec3(-0.5, 0.5, 0.5),
						cbps + vec3(0.5, 0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}
	}

	rit = rinf & 4;

	if(rit != 0) {
		//Right Face
		if(checkRayCast(cbps + vec3(0.5, -0.5, 0.5),
						cbps + vec3(0.5, 0.5, -0.5),
						cbps + vec3(0.5, -0.5, -0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}

		if(checkRayCast(cbps + vec3(0.5, 0.5, 0.5),
						cbps + vec3(0.5, 0.5, -0.5),
						cbps + vec3(0.5, -0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}
	}

	rit = rinf & 8;

	if(rit != 0) {
		//Left Face
		if(checkRayCast(cbps + vec3(-0.5, -0.5, -0.5),
						cbps + vec3(-0.5, 0.5, -0.5),
						cbps + vec3(-0.5, -0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}

		if(checkRayCast(cbps + vec3(-0.5, -0.5, 0.5),
						cbps + vec3(-0.5, 0.5, -0.5),
						cbps + vec3(-0.5, 0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}
	}

	rit = rinf & 16;

	if(rit != 0) {
		//Top Face
		if(checkRayCast(cbps + vec3(0.5, -0.5, 0.5),
						cbps + vec3(-0.5, -0.5, -0.5),
						cbps + vec3(-0.5, -0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}

		if(checkRayCast(cbps + vec3(0.5, -0.5, -0.5),
						cbps + vec3(-0.5, -0.5, -0.5),
						cbps + vec3(0.5, -0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}
	}

	rit = rinf & 32;

	if(rit != 0) {
		//Bottom Face
		if(checkRayCast(cbps + vec3(-0.5, 0.5, 0.5),
						cbps + vec3(-0.5, 0.5, -0.5),
						cbps + vec3(0.5, 0.5, 0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}

		if(checkRayCast(cbps + vec3(0.5, 0.5, 0.5),
						cbps + vec3(-0.5, 0.5, -0.5),
						cbps + vec3(0.5, 0.5, -0.5),
						pos, norm)) {outArray.data[gl_GlobalInvocationID.x] = distance(cbps, pos); return;}
	}

	outArray.data[gl_GlobalInvocationID.x] = -1;
}